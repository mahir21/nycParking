// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // User profile fields
  firstName     String?
  lastName      String?
  phone         String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  
  accounts      Account[]
  sessions      Session[]
  plateWatches  PlateWatch[]
  notifications ViolationNotification[]
}

model PlateWatch {
  id          String   @id @default(cuid())
  userId      String
  plateNumber String
  state       String   @default("NY")
  borough     String?
  nickname    String?  // User can give a nickname to their car
  createdAt   DateTime @default(now())
  isActive    Boolean  @default(true)
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, plateNumber, state])
}

model ViolationNotification {
  id             String   @id @default(cuid())
  userId         String
  plateNumber    String
  ticketNumber   String
  violationCode  String
  violationDesc  String?
  issueDate      String
  borough        String?
  emailSent      Boolean  @default(false)
  emailSentAt    DateTime?
  createdAt      DateTime @default(now())
  
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, ticketNumber])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
